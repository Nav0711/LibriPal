version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: libripal
      POSTGRES_USER: libripal_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seeds/sample_books.sql:/docker-entrypoint-initdb.d/02-sample_books.sql
      - ./database/seeds/library_settings.sql:/docker-entrypoint-initdb.d/03-library_settings.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U libripal_user -d libripal"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    environment:
      DATABASE_URL: postgresql://libripal_user:${POSTGRES_PASSWORD:-your_secure_password}@postgres:5432/libripal
      REDIS_URL: redis://redis:6379/0
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      SMTP_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@libripal.com}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      SECRET_KEY: ${SECRET_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    environment:
      REACT_APP_CLERK_PUBLISHABLE_KEY: ${REACT_APP_CLERK_PUBLISHABLE_KEY}
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped

  # Telegram Bot
  telegram-bot:
    build:
      context: .
      dockerfile: docker/Dockerfile.telegram
    environment:
      DATABASE_URL: postgresql://libripal_user:${POSTGRES_PASSWORD:-your_secure_password}@postgres:5432/libripal
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      API_BASE_URL: http://backend:8000
    depends_on:
      postgres:
        condition: service_healthy
      backend:
        condition: service_started
    restart: unless-stopped

  # Background Task Worker (for reminders and notifications)
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    command: python -m services.reminder_service
    environment:
      DATABASE_URL: postgresql://libripal_user:${POSTGRES_PASSWORD:-your_secure_password}@postgres:5432/libripal
      REDIS_URL: redis://redis:6379/0
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      SMTP_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@libripal.com}
      ENVIRONMENT: ${ENVIRONMENT:-production}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: libripal-network